void sleepcp(int milliseconds) // Cross-platform sleep function
{
    #ifdef _WIN32
        Sleep(milliseconds);
    #else
        usleep(milliseconds * 1000);
    #endif // _WIN32
}

==========================================================================================

cout<<"\n\n(Press any key to continue)";
        cin.get();

==========================================================================================

//multiplatform function for clearing up screen... cause its that big of a task to do
#ifdef _WIN32
#define CLEAR "cls"
#include <windows.h>
#else //In any other OS
#define CLEAR "clear"
#include <unistd.h>
#endif

system(CLEAR);

==========================================================================================

/* 
good for simple checking
can't handle more than 4bytes of input: starts calling big numbers "not numbers"
can't check letters behind/within number entries:

23432sfgf2345
shows up as:
23432
*/

bool valid_int(int&a){              
    if(!(cin>>a))                  //it's actually a boolean, go figure
        {
            cout<<"No...that's not a number\n";               
            cin.clear();
            cin.ignore(9999,'\n');       
        }
    else if(a>10000000)
        {
            cout<<"number's too big\nthe limit's 10000000\n";   
        }
    else
        {
            return true;
        }
}

==========================================================================================

/*
has response to longer inputs for validty
can check for non integer entries within or behind number entries
*/
bool valid_input_to_int(string &s,int &i){
    getline (cin, s);
    for(int x=0;x<s.length();++x)
        {
            if (!isdigit(s[x]))
                {
                    cout<<"\nbruh those ain't even numbers you're typ'n in\ncome back when you're sober\n\n";   
                    return false;
                }
        }
    if ((s.length()>=7))
        {
            cout<<"\ntoo long\n\n";  
            return false;  
        }
    else
        {
            i=atoi(s.c_str());
            return true;
        }      
}

==========================================================================================

 /*
 generates random number from "a" to "b"
 be sure a<b
 */

int randNumi(int a,int b){         
    static default_random_engine chance(time(0));
    uniform_int_distribution<int> range(a,b);
    return range(chance);
}

float randNumf(float a,float b){         
    static default_random_engine chance(time(0));
    uniform_int_distribution<float> range(a,b);
    return range(chance);
}

==========================================================================================